name: Azure Pipelines
variables:
  python.version: '3.7.6'
  tfResourceGroup: 'tstate'
  tfStorageAccount: 'tstate32087'
  tfContainerName: 'tstate'
  tfWorkingDirectory: '$(Build.ArtifactStagingDirectory)/environments/test'
  connection: 'Wiggly World Connection'
  accessKey: '3+VLo8yNpOzW01P9QTe8alLGBIy9rCE2dWnGrX3566IRHYjOA9sZsegEaJqH6y5MlrhfBvxBa06N9jUznawG1Q=='
  newmanWorkingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0Ol53Rp9MoyCRrcXwpuHbSXpvvHNT24dMy3NCnL8OD5bc2ywBMmAZAvc0BQoBZ8MxL9O67oaPENA/+C1UojdtHSyBfYXYZxRKiqFyrRTdYCqcFZ/brZfCxIeQJ7FWs5TKA2/CRMaudClnwZrrpKe8ihZyjEOyHT7AK3tHD00ixFnJ6M6WPwEEaRg0ZHMkrDKLa4+ikgg6d+cwWN80YJvpJUKgR+Qss7SD4aKI8lsXUf7KWNQgfGoppcAIdOpt95VFxUF5WzCNn8JT4a0xQdijftfeOgno2F7MITI3DLz3enk1Q4Ieo7nTxCnDM8KQUB+M0FDhQ6Tr6HQPEPKV75Cd paulw@PAUL-DESKTOP-1'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraform Files'
      inputs:
        SourceFolder: 'terraform'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        ArtifactName: 'drop'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : init'
      inputs:
        backendServiceArm: '$(connection)'
        WorkingDirectory: '$(tfWorkingDirectory)'
        backendAzureRmResourceGroupName: '$(tfResourceGroup)'
        backendAzureRmStorageAccountName: '$(tfStorageAccount)'
        backendAzureRmContainerName: '$(tfContainerName)'
        backendAzureRmKey: '$(accessKey)'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : plan'
      inputs:
        command: plan
        workingDirectory: '$(tfWorkingDirectory)'
        environmentServiceNameAzureRM: '$(connection)'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : apply'
      inputs:
        command: apply
        workingDirectory: '$(tfWorkingDirectory)'
        environmentServiceNameAzureRM: '$(connection)'
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: 'Install SSH key on VM'
      inputs:
        knownHostsEntry: '52.143.70.125 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOM+qPK8T+HlsJ5+LaXMIsoiu7smcvK+lDvtoizJzu4kEd7oSWNYymvNu64ou+BaOg4dhGFWOaoXsEDQVuRwZyg='
        sshPublicKey: '$(sshPublicKey)'
        sshKeySecureFile: 'id_rsa'
    # This is probably not a best practice, but it's awesome that it works
    - task: PowerShell@2
      inputs:
        name: 'getIPStep'
        targetType: 'inline'
        script: 'Write-Host "##vso[task.setvariable variable=publicIPAddress;isOutput=true](Get-AzureRmPublicIpAddress -ResourceGroupName wiggly-world -Name wiggly-publicip-pubip).IpAddress"'
    - task: SSH@0
      inputs:
        sshEndpoint: 'adminuser@$(getIPStep.publicIPAddress)'
        runOptions: 'inline'
        #commands: # Required when runOptions == Commands
        #scriptPath: # Required when runOptions == Script
        #interpreterCommand: # Used when runOptions == Inline
        #args: # Optional
        #failOnStdErr: true # Optional
        inline:  |
          #! /bin/bash
          
          mkdir azagent
          cd azagent
          curl -fkSL -o vstsagent.tar.gz https://vstsagentpackage.azureedge.net/agent/2.177.1/vsts-agent-linux-x64-2.177.1.tar.gz
          tar -zxvf vstsagent.tar.gz
          if [ -x "$(command -v systemctl)" ];
          then
             ./config.sh --deploymentpool --deploymentpoolname "Wiggly-Deployment-Group" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/paulwilliamsredmond/ --work _work --runasservice
             sudo ./svc.sh install
             sudo ./svc.sh start
          else ./config.sh --deploymentpool --deploymentpoolname "Wiggly-Deployment-Group" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/paulwilliamsredmond/ --work _work
             ./run.sh;
          fi
    - task: ArchiveFiles@2
      displayName: 'Archive UI Test'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/ui-test.zip'
    - publish: $(Build.ArtifactStagingDirectory)/ui-test.zip
      displayName: 'Upload UI Test'
      artifact: drop-ui-test
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI'
      artifact: drop-fakerestapi
#    - task: Bash@3
#      displayName: 'Newman: install'
#      inputs:
#        targetType: 'inline'
#        workingDirectory: '$(newmanWorkingDirectory)'
#        script: |
#          #! /bin/bash
#          sudo npm install -g newman
#    - task: Bash@3
#      displayName: 'Newman: run'
#      inputs:
#        targetType: 'inline'
#        workingDirectory: '$(newmanWorkingDirectory)'
#        script: |
#          #! /bin/bash
#          newman run Wiggly-World.postman_collection.json \
#                 -e Wiggly-World.postman_environment.json \
#                 -r "cli,json" \
#                 --reporter-json-export integration-test-results.json
#    - publish: '$(newmanWorkingDirectory)/integration-test-results.json'
#      displayName: 'Newman: publish artifacts'
#      artifact: drop-integration-test-results
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: TEST
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(connection)'
              appName: 'wiggly-api'
              appType: 'webAppLinux'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
  - deployment: VMDeploy
    displayName: VMDeploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment:
      name: TEST
      resourceType: VirtualMachine
      tags: 'quality-releases'
    strategy:
      runOnce:
        preDeploy:
          steps:
          #- task: DownloadPipelineArtifact@2
          #  inputs:
              #source: 'current' # Options: current, specific
              #project: # Required when source == Specific
              #pipeline: # Required when source == Specific
              #preferTriggeringPipeline: false # Optional
              #runVersion: 'latest' # Required when source == Specific# Options: latest, latestFromBranch, specific
              #runBranch: 'refs/heads/master' # Required when source == Specific && RunVersion == LatestFromBranch
              #runId: # Required when source == Specific && RunVersion == Specific
              #tags: # Optional
              #artifact: # Optional
              #patterns: '**' # Optional
              #path: '$(Pipeline.Workspace)'
          #    artifact: drop-ui-test
          - script: |
              #! /bin/bash
              
              echo 'download drop-ui-test.zip'
              
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path