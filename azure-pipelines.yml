name: Azure Pipelines
variables:
  python.version: '3.7.6'
  tfResourceGroup: 'tstate'
  tfStorageAccount: 'tstate32087'
  tfContainerName: 'tstate'
  tfWorkingDirectory: '$(Build.ArtifactStagingDirectory)/environments/test'
  connection: 'Wiggly World Connection'
  accessKey: '3+VLo8yNpOzW01P9QTe8alLGBIy9rCE2dWnGrX3566IRHYjOA9sZsegEaJqH6y5MlrhfBvxBa06N9jUznawG1Q=='
  newmanWorkingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
  jmeterWorkingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
  jmeterFile: 'apache-jmeter-5.3'
  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0Ol53Rp9MoyCRrcXwpuHbSXpvvHNT24dMy3NCnL8OD5bc2ywBMmAZAvc0BQoBZ8MxL9O67oaPENA/+C1UojdtHSyBfYXYZxRKiqFyrRTdYCqcFZ/brZfCxIeQJ7FWs5TKA2/CRMaudClnwZrrpKe8ihZyjEOyHT7AK3tHD00ixFnJ6M6WPwEEaRg0ZHMkrDKLa4+ikgg6d+cwWN80YJvpJUKgR+Qss7SD4aKI8lsXUf7KWNQgfGoppcAIdOpt95VFxUF5WzCNn8JT4a0xQdijftfeOgno2F7MITI3DLz3enk1Q4Ieo7nTxCnDM8KQUB+M0FDhQ6Tr6HQPEPKV75Cd paulw@PAUL-DESKTOP-1'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraform Files'
      inputs:
        SourceFolder: 'terraform'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     ArtifactName: 'drop'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    #   displayName: 'Install Terraform'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : init'
    #   inputs:
    #     backendServiceArm: '$(connection)'
    #     WorkingDirectory: '$(tfWorkingDirectory)'
    #     backendAzureRmResourceGroupName: '$(tfResourceGroup)'
    #     backendAzureRmStorageAccountName: '$(tfStorageAccount)'
    #     backendAzureRmContainerName: '$(tfContainerName)'
    #     backendAzureRmKey: '$(accessKey)'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : plan'
    #   inputs:
    #     command: plan
    #     workingDirectory: '$(tfWorkingDirectory)'
    #     environmentServiceNameAzureRM: '$(connection)'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : apply'
    #   inputs:
    #     command: apply
    #     workingDirectory: '$(tfWorkingDirectory)'
    #     environmentServiceNameAzureRM: '$(connection)'
    # # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   displayName: 'Install SSH key on VM'
    #   inputs:
    #     knownHostsEntry: '52.143.70.125 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOM+qPK8T+HlsJ5+LaXMIsoiu7smcvK+lDvtoizJzu4kEd7oSWNYymvNu64ou+BaOg4dhGFWOaoXsEDQVuRwZyg='
    #     sshPublicKey: '$(sshPublicKey)'
    #     sshKeySecureFile: 'id_rsa'
    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Test'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/ui-test.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/ui-test.zip
    #   displayName: 'Upload UI Test'
    #   artifact: drop-ui-test
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload FakeRestAPI'
    #   artifact: drop-fakerestapi
    # - task: Bash@3
    #   displayName: 'Newman: install'
    #   inputs:
    #     targetType: 'inline'
    #     workingDirectory: '$(newmanWorkingDirectory)'
    #     script: |
    #       #! /bin/bash
    #       sudo npm install -g newman
    # - task: Bash@3
    #   displayName: 'Newman: Regression Test'
    #   inputs:
    #     targetType: 'inline'
    #     workingDirectory: '$(newmanWorkingDirectory)'
    #     script: |
    #       #! /bin/bash
    #       newman run Wiggly-World-Regression.postman_collection.json \
    #              -e Wiggly-World.postman_environment.json \
    #              -r "cli,junit" \
    #              --reporter-junit-export regression-test-results.json
          
    #       # The endpoint is unstable, some test failure is expected
    #       exit 0
    # - task: Bash@3
    #   displayName: 'Newman: Integration Test'
    #   inputs:
    #     targetType: 'inline'
    #     workingDirectory: '$(newmanWorkingDirectory)'
    #     script: |
    #       #! /bin/bash
    #       newman run Wiggly-World-Integration.postman_collection.json \
    #              -e Wiggly-World.postman_environment.json \
    #              -r "cli,junit" \
    #              --reporter-junit-export integration-test-results.json
          
    #       # The endpoint is unstable, some test failure is expected
    #       exit 0
    # Publish test results to Azure Pipelines
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFiles: '*-test-results.json'
    #     searchFolder: '$(newmanWorkingDirectory)'
    - task: Bash@3
      displayName: 'JMeter: install'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(jmeterWorkingDirectory)'
        script: |
          #! /bin/bash
          wget https://apache.osuosl.org/jmeter/binaries/$(jmeterFile).tgz
          tar -xf $(jmeterFile).tgz
          mv $(jmeterFile) jmeter
          ls jmeter/bin
          wget --output-document=plugins-manager.jar https://jmeter-plugins.org/get/
          mv plugins-manager.jar jmeter/lib/ext
          jmeter/bin/PluginsManagerCMD.sh install bzm-random-csv
    - task: Bash@3
      displayName: 'JMeter: Endurance Test'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(jmeterWorkingDirectory)'
        script: |
          #! /bin/bash
          PATH=$PATH:$(jmeterWorkingDirectory)/jmeter/bin
          jmeter -n -t Endurance.jmx -l Endurance_results.txt -e -o Endurance_results
    - task: Bash@3
      displayName: 'JMeter: Stress Test'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(jmeterWorkingDirectory)'
        script: |
          #! /bin/bash
          PATH=$PATH:$(jmeterWorkingDirectory)/jmeter/bin
          jmeter -n -t Stress.jmx -l Stress_results.txt -e -o Stress_results
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: TEST
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(connection)'
              appName: 'wiggly-api'
              appType: 'webAppLinux'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
  - deployment: VMDeploy
    displayName: VMDeploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment:
      name: TEST
      resourceType: VirtualMachine
      tags: 'quality-releases'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop-ui-test
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
              
                sudo add-apt-repository universe
                sudo apt-get update
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                unzip -o chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                export PATH=$PATH:/usr/bin/chromedriver
                pushd $(Pipeline.Workspace)
                unzip -o ui-test.zip
                chromium-browser --headless --no-sandbox --disable-dev-shm-usage --disable-gpu --remote-debugging-port=9222 &
                sleep 5s
                python3 run_test.py --headless | sudo tee -a /var/log/ui-test.log
                exit_code=${PIPESTATUS[0]}
                pkill chromium
                exit $((exit_code))
